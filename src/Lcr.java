import ij.IJ;
import ij.ImagePlus;
import ij.plugin.PlugIn;
import ij.process.ImageProcessor;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.*;
import uk.co.caprica.vlcj.discovery.NativeDiscovery;

/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
/**
 *
 * @author Sushil
 */
public class Lcr extends javax.swing.JFrame {

    private JLabel photographLabel;
    private String imagedir = "";
    private String[] imageCaptions = new String[50];
    private int Length = 0;
    private String[] imageFileNames = new String[50];
    imageApp im = new imageApp();
    MissingIcon placeholderIcon = new MissingIcon();
    PicsPanel pp;
    private String imageload = "";
    private int filelength = 0;
    imageProcessing imp = new imageProcessing();
    String loadimage = "";
    String load = "";
    char ch[] = new char[999];
    int data[][] = new int [999][35];
    int position =0;
    /**
     * Creates new form Lcr
     */
    public Lcr() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputPanel = new javax.swing.JPanel();
        inputLabel = new javax.swing.JLabel();
        verLabel = new javax.swing.JLabel();
        iconLabel = new javax.swing.JLabel();
        textpane = new javax.swing.JScrollPane();
        infoText = new javax.swing.JTextArea();
        controlPanel = new javax.swing.JPanel();
        choosecameraButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        loadimageButton = new javax.swing.JButton();
        setimagefolderButton = new javax.swing.JButton();
        clearoutputButton = new javax.swing.JButton();
        outputScrollpane = new javax.swing.JScrollPane();
        outputTextarea = new javax.swing.JTextArea();
        lcrLabel = new javax.swing.JLabel();
        aboutLabel = new javax.swing.JLabel();
        imagesScrollpane = new javax.swing.JScrollPane();
        buttonBar = new javax.swing.JToolBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Live! Character Recognition");
        setName("lcrFrame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        inputPanel.setBackground(new java.awt.Color(153, 180, 209));
        inputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, java.awt.Color.black), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black)), "Input", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("OCR A Std", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        inputPanel.setName("");
        inputPanel.setPreferredSize(new java.awt.Dimension(700, 500));
        inputPanel.setVerifyInputWhenFocusTarget(false);

        inputLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        inputLabel.setForeground(new java.awt.Color(51, 51, 51));
        inputLabel.setText("Live! Character Recognition");

        verLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        verLabel.setForeground(new java.awt.Color(51, 51, 51));
        verLabel.setText("Ver. 1.0");

        iconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon.gif"))); // NOI18N

        textpane.setBackground(new java.awt.Color(153, 180, 209));
        textpane.setBorder(null);
        textpane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        textpane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        infoText.setBackground(new java.awt.Color(153, 180, 209));
        infoText.setColumns(20);
        infoText.setEditable(false);
        infoText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 20)); // NOI18N
        infoText.setForeground(new java.awt.Color(0, 51, 51));
        infoText.setLineWrap(true);
        infoText.setRows(5);
        infoText.setText("You have not selected the camera or set a picture\n \nTo set a picture click [Set Image Folder...] and select the\nimage from [Images]. After that you can click [Load Image] to\nprocess it.\n\nOR\n\nClick [Choose Camera...] to select the appropriate camera.\nNext, you can click [Start] to start processing.\n");
        textpane.setViewportView(infoText);

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(iconLabel)
                        .addGap(46, 46, 46)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputLabel)
                            .addComponent(verLabel))
                        .addGap(0, 50, Short.MAX_VALUE))
                    .addComponent(textpane, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iconLabel)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(inputLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(verLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textpane, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        controlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Controls", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("OCR A Std", 0, 12))); // NOI18N

        choosecameraButton.setFont(new java.awt.Font("Trajan Pro", 0, 12)); // NOI18N
        choosecameraButton.setText("Choose Camera...");
        choosecameraButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        choosecameraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosecameraButtonActionPerformed(evt);
            }
        });

        startButton.setFont(new java.awt.Font("Trajan Pro", 0, 12)); // NOI18N
        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setFont(new java.awt.Font("Trajan Pro", 0, 12)); // NOI18N
        stopButton.setText("Stop");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        loadimageButton.setFont(new java.awt.Font("Trajan Pro", 0, 12)); // NOI18N
        loadimageButton.setText("Load Image");
        loadimageButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        loadimageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadimageButtonActionPerformed(evt);
            }
        });

        setimagefolderButton.setFont(new java.awt.Font("Trajan Pro", 0, 12)); // NOI18N
        setimagefolderButton.setText("Set Image Folder...");
        setimagefolderButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setimagefolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setimagefolderButtonActionPerformed(evt);
            }
        });

        clearoutputButton.setFont(new java.awt.Font("Trajan Pro", 0, 12)); // NOI18N
        clearoutputButton.setText("Clear Output");
        clearoutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearoutputButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(choosecameraButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setimagefolderButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadimageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearoutputButton)
                .addContainerGap(252, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(choosecameraButton)
                    .addComponent(startButton)
                    .addComponent(stopButton)
                    .addComponent(setimagefolderButton)
                    .addComponent(loadimageButton)
                    .addComponent(clearoutputButton))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        outputScrollpane.setHorizontalScrollBar(null);

        outputTextarea.setColumns(20);
        outputTextarea.setEditable(false);
        outputTextarea.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        outputTextarea.setLineWrap(true);
        outputTextarea.setRows(5);
        outputTextarea.setText("Live! Character Recognition\nVer. 1.0\n\nYou have not selected the camera or set a picture\n \nTo set a picture click [Set Image Folder...] and select the\nimage from [Images]. After that you can click [Load Image] to\nprocess it.\n\nOR\n\nClick [Choose Camera...] to select the appropriate camera.\nNext, you can click [Start] to start processing.");
        outputTextarea.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)), "Output", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("OCR A Std", 0, 12))); // NOI18N
        outputTextarea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        outputTextarea.setFocusable(false);
        outputScrollpane.setViewportView(outputTextarea);

        lcrLabel.setFont(new java.awt.Font("Vrinda", 0, 12)); // NOI18N
        lcrLabel.setText("Live! Character Recognition. Ver. 1.0");
        lcrLabel.setToolTipText("");

        aboutLabel.setFont(new java.awt.Font("Vrinda", 0, 12)); // NOI18N
        aboutLabel.setText("About");
        aboutLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        aboutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aboutLabelMouseClicked(evt);
            }
        });

        imagesScrollpane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Images", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("OCR A Std", 0, 12))); // NOI18N
        imagesScrollpane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        buttonBar.setBorder(null);
        buttonBar.setFloatable(false);
        buttonBar.setRollover(true);
        imagesScrollpane.setViewportView(buttonBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imagesScrollpane, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(outputScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(287, 287, 287)
                        .addComponent(lcrLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(aboutLabel)
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(outputScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                    .addComponent(inputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imagesScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lcrLabel)
                    .addComponent(aboutLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
    }//GEN-LAST:event_formWindowOpened

    private void setimagefolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setimagefolderButtonActionPerformed
        // TODO add your handling code here:
        if (stopButton.isEnabled() == true) {
            javax.swing.JOptionPane.showMessageDialog(null, "Please stop the camera before you set image folder", "Action not allowed", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            im.run();
        }
    }//GEN-LAST:event_setimagefolderButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // TODO add your handling code here:
        pp.closeDown();
        startButton.setEnabled(true);
        stopButton.setEnabled(false);
        setpanel();
        java.io.File file = new java.io.File("").getAbsoluteFile();
        String name = file.getPath().replace('\\', '/') + '/';
        String path = name+"src/input/1.jpg";
        imp.set(path);
    }//GEN-LAST:event_stopButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        imageload = "";
        startButton.setEnabled(false);
        stopButton.setEnabled(true);
        clearpanel();
        new NativeDiscovery().discover();
        pp = new PicsPanel(this);
        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
            inputPanelLayout.setHorizontalGroup(
                  inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(inputPanelLayout.createSequentialGroup().addComponent(pp)));
            inputPanelLayout.setVerticalGroup(
                    inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(inputPanelLayout.createSequentialGroup().addComponent(pp)));
    }//GEN-LAST:event_startButtonActionPerformed

    private void choosecameraButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choosecameraButtonActionPerformed
        // TODO add your handling code here:   
        if (stopButton.isEnabled() == true) {
            javax.swing.JOptionPane.showMessageDialog(null, "Please stop the current camera before you choose the new one.", "Action not allowed", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            this.setFocusable(false);
            chooseCamera cc = new chooseCamera();
            cc.setVisible(true);
            cc.firstcall();
        }
    }//GEN-LAST:event_choosecameraButtonActionPerformed

    private void clearoutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearoutputButtonActionPerformed
        // TODO add your handling code here:
        outputTextarea.setText("");
    }//GEN-LAST:event_clearoutputButtonActionPerformed

    private void loadimageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadimageButtonActionPerformed
        // TODO add your handling code here:
        if (imageload.equals("")) {
            javax.swing.JOptionPane.showMessageDialog(null, "Please select an image to load", "Invalid Action", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else if (stopButton.isEnabled() == true) {
            javax.swing.JOptionPane.showMessageDialog(null, "Please stop the camera before processing an image", "Action not allowed", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            outputTextarea.setText("");
            load = "";
            for (int i = 0; i < filelength; i++) {
                if (imageload.equals(imageFileNames[i].substring(0, imageFileNames[i].lastIndexOf('.')))) {
                    load = imageFileNames[i];
                    break;
                }
            }
            loadimage = imagedir.concat(load);
            imp.set(loadimage);
            //javax.swing.JOptionPane.showMessageDialog(null, "The image to load is "+loadimage, "Image", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_loadimageButtonActionPerformed

    private void aboutLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutLabelMouseClicked
        // TODO add your handling code here:
        aboutus about = new aboutus();
        about.setVisible(true);
    }//GEN-LAST:event_aboutLabelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lcr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Lcr().setVisible(true);
            }
        });
    }

    public void setOutputTextarea(JTextArea outputTextarea) {
        this.outputTextarea.setText(outputTextarea.getText());
        repaint();
        revalidate();
        //lcr1.repaint();
    }

    public void first() {
        //System.out.println("Inside First. This is called only once");
        java.util.Scanner s = null;
        
        try {
            s = new java.util.Scanner(new java.io.BufferedReader(new java.io.FileReader("sample")));
            s.useLocale(java.util.Locale.US);
            position = 0;
            while (s.hasNext()) {
                if (s.hasNextLine()) {
                   String c = s.nextLine();
                   ch[position] = c.charAt(0);
                   for(int i=0;i<35;i++){
                       Character cha = new Character(c.charAt(i+1));
                       String st = cha.toString();
                       data[position][i] = Integer.parseInt(st);
                   }
                   position++;
                }
            }
        } catch (java.io.IOException ert) {
            javax.swing.JOptionPane.showMessageDialog(null, ert, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        
        try {
            s = new java.util.Scanner(new java.io.BufferedReader(new java.io.FileReader("imageload")));
            s.useLocale(java.util.Locale.US);
            while (s.hasNext()) {
                if (s.hasNextLine()) {
                    imagedir = s.nextLine();
                }
            }
        } catch (java.io.IOException ert) {
            javax.swing.JOptionPane.showMessageDialog(null, ert, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        s.close();
        if (imagedir.equals("")) {
            javax.swing.JOptionPane.showMessageDialog(null, "This must be your first run of Live! Character Recognition.\nPlease set an image folder.", "Problem loading image", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            im.running();
        }
    }

    private void clearpanel() {
        inputPanel.removeAll();
        inputPanel.repaint();
        //outputTextarea.setText("");
    }

    private void setpanel() //<editor-fold defaultstate="collapsed" desc="comment">
    {
        //</editor-fold>
        inputPanel.removeAll();
        inputPanel.repaint();

        inputLabel = new javax.swing.JLabel();
        verLabel = new javax.swing.JLabel();
        iconLabel = new javax.swing.JLabel();
        textpane = new javax.swing.JScrollPane();
        infoText = new javax.swing.JTextArea();

        inputLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        inputLabel.setForeground(new java.awt.Color(51, 51, 51));

        verLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        verLabel.setForeground(new java.awt.Color(51, 51, 51));

        textpane.setBackground(new java.awt.Color(153, 180, 209));
        textpane.setBorder(null);
        textpane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        textpane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        infoText.setBackground(new java.awt.Color(153, 180, 209));
        infoText.setColumns(20);
        infoText.setEditable(false);
        infoText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 20)); // NOI18N
        infoText.setForeground(new java.awt.Color(0, 51, 51));
        infoText.setLineWrap(true);
        infoText.setRows(5);
        textpane.setViewportView(infoText);

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
                inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(inputPanelLayout.createSequentialGroup().addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(inputPanelLayout.createSequentialGroup().addGap(4, 4, 4).addComponent(iconLabel).addGap(46, 46, 46).addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(verLabel).addComponent(inputLabel)).addGap(0, 0, Short.MAX_VALUE)).addComponent(textpane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)).addContainerGap()));
        inputPanelLayout.setVerticalGroup(
                inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(inputPanelLayout.createSequentialGroup().addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(iconLabel).addGroup(inputPanelLayout.createSequentialGroup().addComponent(inputLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(verLabel))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(textpane, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(0, 0, Short.MAX_VALUE)));


        inputLabel.setText("Live! Character Recognition");
        verLabel.setText("Ver. 1.0");
        infoText.append("You have not selected the camera or set a picture\n\n"
                + "To set a picture click [Set Image Folder...] and select the"
                + "\nimage from [Images]. After that you can click [Load Image] to"
                + "\nprocess it.\n\nOR\n\nClick [Choose Camera...] to select the appropriate camera."
                + "\nNext, you can click [Start] to start processing.");
        iconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon.gif")));

        outputTextarea.setText("Live! Character Recognition\nVer. 1.0\n\nYou have not "
                + "selected the camera or set a picture\n \nTo set a picture click [Set Image Folder...] and "
                + "select the\nimage from [Images]. "
                + "After that you can click [Load Image] to\nprocess it.\n\nOR\n\nClick [Choose Camera...] "
                + "to select the appropriate camera."
                + "\nNext, you can click [Start] to start processing.");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aboutLabel;
    private javax.swing.JToolBar buttonBar;
    private javax.swing.JButton choosecameraButton;
    private javax.swing.JButton clearoutputButton;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JScrollPane imagesScrollpane;
    private javax.swing.JTextArea infoText;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JLabel lcrLabel;
    private javax.swing.JButton loadimageButton;
    private javax.swing.JScrollPane outputScrollpane;
    private javax.swing.JTextArea outputTextarea;
    private javax.swing.JButton setimagefolderButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JScrollPane textpane;
    private javax.swing.JLabel verLabel;
    // End of variables declaration//GEN-END:variables

    
class PicsPanel extends JPanel implements Runnable
{
  private final Dimension PANEL_SIZE = new Dimension(100, 100);  
          // dimensions of panel initially;  later set to video's frame size

  private static final int DELAY = 100;  // ms  (could be 90-120 ms)

  private static final String SAVE_FNM = ".jpg";


  private JFrame top;
  private BufferedImage image = null;
  private VLCCapture camera; 
  private volatile boolean isRunning;
  
  // used for the average ms snap time info
  private int imageCount = 0;
  private long totalTime = 0;
  private DecimalFormat df;
  private Font msgFont;

  private int i=1;

  public PicsPanel(JFrame top)
  {
    this.top = top;
    setMinimumSize(PANEL_SIZE);
    setPreferredSize(PANEL_SIZE);

    df = new DecimalFormat("0.#");  // 1 dp
    msgFont = new Font("SansSerif", Font.BOLD, 18);

    new Thread(this).start();   // start updating the panel's image
  }


    @Override
  public void run()
  /* take a picture every DELAY ms */
  {
    camera = new VLCCapture();

    // update panel and window sizes to fit video's frame size
    Dimension frameSize = camera.getFrameSize();
    if (frameSize != null) {
      setMinimumSize(frameSize);
      setPreferredSize(frameSize);
      //top.pack();   // resize and center JFrame
      //top.setLocationRelativeTo(null);
    }

    long duration;
    BufferedImage im = null;
    isRunning = true;

    while (isRunning) {
      long startTime = System.currentTimeMillis();
      im = camera.getImage();  // take a snap
      duration = System.currentTimeMillis() - startTime;

      if (im == null)
        System.out.println("Problem loading image " + (imageCount+1));
      else {
        image = im;  // only update image if im contains something
        saveSnap(image, SAVE_FNM);
        imageCount++;
        totalTime += duration;
        repaint();
      }

      if (duration < DELAY) {
        try {
          Thread.sleep(DELAY-duration);  // wait until DELAY time has passed
        } 
        catch (Exception ex) {}
      }
    }

       // save last image
    camera.close();    // close down the camera
  }


    @Override
  public void paintComponent(Graphics g)
  /* Draw the snap and add the average ms snap time at the 
     bottom of the panel. */
  { 
    super.paintComponent(g);

    int panelHeight = getHeight();

    // center the image
    int x = 0;
    int y = 0;
    if (image != null) {
      x = (int)(getWidth() - image.getWidth())/2;
      y = (int)(panelHeight - image.getHeight())/2;
    }
    g.drawImage(image, x, y, this);   // draw the snap

    showStats(g, panelHeight);
  } // end of paintComponent()



  private void showStats(Graphics g, int panelHeight)
  {
    // write statistics in bottom-left corner
    g.setFont(msgFont);
    if (imageCount > 0) {
      g.setColor(Color.YELLOW);
      double avgGrabTime = (double) totalTime / imageCount;
      g.drawString("Pic " + imageCount + "  " +
                   df.format(avgGrabTime) + " ms", 
                   5, panelHeight-10);  // bottom left
    }
    else  { // no image yet
      g.setColor(Color.BLUE);
      g.drawString("Loading...", 5, panelHeight-10);
    }
  }  // end of showStats()



  public void closeDown()
  /* Terminate run() and wait for the camera to be closed.
     This stops the application from exiting until everything
     has finished. */
  { 
    isRunning = false;
    while (!camera.isClosed()) {
      try {
        Thread.sleep(DELAY);
      } 
      catch (Exception ex) {}
    }
  } // end of closeDown()



 // ----------------- support methods ------------------------------

  private void saveSnap(BufferedImage im, String fnm)
  // save image as JPG
  {
	fnm=i+fnm;
	//i++;
    java.io.File file = new java.io.File("").getAbsoluteFile();
    String name = file.getPath().replace('\\', '/') + '/';
    //System.out.println("Saving image to " + fnm);
    try {
      ImageIO.write(im, "jpg", new File(name+"src/input/"+fnm));
    }
    catch(IOException e)
    {  System.out.println("Could not save image");  }
  }  // end of saveSnap()

} // end of PicsPanel class
    
    public class imageProcessing extends ImagePlus implements PlugIn {

        private candidateTextDet ctd;
        private textRegLoca trl;
        private characExtract ce;
        private ImagePlus Im = IJ.createImage("new_image", "8-bit black", 640, 480, 1);
        
        int[] c;
        
        public void set(String name) {
            Im = IJ.openImage(name);
            run("");
        }

        @Override
        public void run(String arg) {
            
            java.io.File file = new java.io.File("").getAbsoluteFile();
            String name = file.getPath().replace('\\', '/') + '/';

            ctd = new candidateTextDet();
            trl = new textRegLoca();
            ce = new characExtract();
            int chardata[] = new int [35];

            ImagePlus im = Im.duplicate();
            ImagePlus finish = Im.duplicate();


            IJ.run(im, "8-bit", "");

            ImagePlus featuremap = ctd.candidateTextDet(im);

            int l = trl.textRegLoca(featuremap, finish);
            ce.spaceset(l);
            
            c = new int[l];
            
            c = ce.characExtract(l);

            //mn.load_actionPerformed(null);
            //mn.train_actionPerformed(null);
            
            int total=0;
            
            for (int i = 0; i <l; i++) {
                total+=c[i];
            }

            int i = 0;
            for (int count = 0; count < total; count++) {
                if(c[i]==count){
                  outputTextarea.setText(outputTextarea.getText()+" ");
                  i++;
                  c[i]+=c[i-1];
                }
                String path = name + "src/cache/ocr/" + (count + 1) + ".jpg";
                chardata = extractBytes(path);
                int flag=0;
                int m=0;
                for(m=0;m<position;m++){
                    for(int j = 0 ;j<35;j++){
                        if(data[m][j]!=chardata[j]){
                            flag--;
                            break;
                        }
                        else{
                            flag++;
                        }
                    }
                    if(flag==35){
                        break;
                    }
                    else{
                        flag=0;
                    }
                }
                
                char recognized = ' ';
                if(flag==35){
                    recognized = ch[m];
                }
                else{
                    recognized = '?';
                }
                
                outputTextarea.setText(outputTextarea.getText() + ""+recognized);

                //java.io.File fileocr = new java.io.File(name + "src/cache/ocr/" + (count + 1) + ".jpg");
                //fileocr.delete();
            }
        }
        
        public int[] extractBytes (String ImageName){
     // open image
        int n=0;
        int chardata[] = new int[35];
        ImagePlus I3 = IJ.openImage(ImageName);
        ImageProcessor ip1 = I3.getProcessor();
        for(int j=0;j<7;j++){
            for(int k=0;k<5;k++){
                int temp = ip1.getPixel(k, j);
               if(temp==255){
                    chardata[n]=1;
                }
                else{
                    chardata[n]=0;
                }
                //System.out.println("getpixel  = "+temp);
                n++;
            }
        }
        return chardata;
    }
    }

    public class imageApp {

        String filename;

        /**
         * Main entry point. Loads the Swing elements on the "Event Dispatch
         * Thread".
         *
         * @param args
         */
        public void run() {
            javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
            fc.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
            int returnVal = fc.showOpenDialog(null);

            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                setpanel();
                buttonBar.removeAll();
                buttonBar.repaint();

                java.io.File file = fc.getSelectedFile();
                imagedir = file.getPath().replace('\\', '/') + '/';
                try (java.io.BufferedWriter out = new java.io.BufferedWriter(new java.io.FileWriter("imageload", false))) {
                    out.write(imagedir);
                    out.close();
                } catch (java.io.IOException ert) {
                    javax.swing.JOptionPane.showMessageDialog(null, ert, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                running();

            }
        }

        public void running() {
            Length = 0;
            java.io.File[] files = new java.io.File(imagedir).listFiles();
            filelength = files.length;
            int j = 0;
            for (int i = 0; i < filelength; i++) {
                if (files[i].isFile()) {
                    filename = files[i].getName();
                    if (filename.toLowerCase().endsWith(".jpg") || filename.toLowerCase().endsWith(".jpeg")
                            || filename.toLowerCase().endsWith(".png") || filename.toLowerCase().endsWith(".bmp")
                            || filename.toLowerCase().endsWith(".gif") || filename.toLowerCase().endsWith(".tif")) {
                        imageFileNames[Length] = filename;
                        imageCaptions[Length] = filename.substring(0, filename.lastIndexOf('.'));
                        Length++;
                    }
                }
            }
            new imageApp();
        }

        /**
         * Default constructor.
         */
        public imageApp() {
            loadimages.execute();
        }
        /**
         * SwingWorker class that loads the images a background thread and calls
         * publish when a new one is ready to be displayed.
         *
         * We use Void as the first SwingWroker param as we do not need to
         * return anything from doInBackground().
         */
        private SwingWorker<Void, ThumbnailAction> loadimages = new SwingWorker<Void, ThumbnailAction>() {

            /**
             * Creates full size and thumbnail versions of the target image
             * files.
             */
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i < Length; i++) {
                    ImageIcon icon;
                    icon = createImageIcon(imagedir + imageFileNames[i], imageCaptions[i]);
                    ThumbnailAction thumbAction;
                    if (icon != null) {

                        ImageIcon Icon = new ImageIcon(getScaledImage(icon.getImage(), 640, 480));

                        ImageIcon thumbnailIcon = new ImageIcon(getScaledImage(icon.getImage(), 64, 64));

                        thumbAction = new ThumbnailAction(Icon, thumbnailIcon, imageCaptions[i]);

                    } else {
                        // the image failed to load for some reason
                        // so load a placeholder instead
                        thumbAction = new ThumbnailAction(placeholderIcon, placeholderIcon, imageCaptions[i]);
                    }
                    publish(thumbAction);
                }
                // unfortunately we must return something, and only null is valid to
                // return when the return type is void.
                return null;
            }

            /**
             * Process all loaded images.
             */
            @Override
            protected void process(List<ThumbnailAction> chunks) {
                for (ThumbnailAction thumbAction : chunks) {
                    JButton thumbButton = new JButton(thumbAction);
                    // add the new button BEFORE the last glue
                    // this centers the buttons in the toolbar
                    buttonBar.add(thumbButton, buttonBar.getComponentCount() - 1);
                }
            }
        };

        /**
         * Creates an ImageIcon if the path is valid.
         *
         * @param String - resource path
         * @param String - description of the file
         */
        protected ImageIcon createImageIcon(String path,
                String description) {
            if (path != null) {
                return new ImageIcon(path, description);
            } else {
                System.err.println("Couldn't find file: " + path);
                return null;
            }
        }

        /**
         * Resizes an image using a Graphics2D object backed by a BufferedImage.
         *
         * @param srcImg - source image to scale
         * @param w - desired width
         * @param h - desired height
         * @return - the new resized image
         */
        private Image getScaledImage(Image srcImg, int w, int h) {
            BufferedImage resizedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = resizedImg.createGraphics();
            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g2.drawImage(srcImg, 0, 0, w, h, null);
            g2.dispose();
            return resizedImg;
        }

        /**
         * Action class that shows the image specified in it's constructor.
         */
        private class ThumbnailAction extends AbstractAction {

            /**
             * The icon if the full image we want to display.
             */
            private Icon displayPhoto;

            /**
             * @param Icon - The full size photo to show in the button.
             * @param Icon - The thumbnail to show in the button.
             * @param String - The description of the icon.
             */
            public ThumbnailAction(Icon photo, Icon thumb, String desc) {

                displayPhoto = photo;

                // The short description becomes the tooltip of a button.
                putValue(SHORT_DESCRIPTION, desc);

                // The LARGE_ICON_KEY is the key for setting the
                // icon when an Action is applied to a button.
                putValue(LARGE_ICON_KEY, thumb);
            }

            /**
             * Shows the full image in the main area and sets the application
             * title.
             */
            @Override
            public void actionPerformed(ActionEvent e) {
                if (stopButton.isEnabled() == true) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Please stop the camera before you choose to load image", "Action not allowed", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                } else {
                    clearpanel();
                    photographLabel = new JLabel();

                    javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
                    inputPanel.setLayout(inputPanelLayout);
                    inputPanelLayout.setHorizontalGroup(
                            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(inputPanelLayout.createSequentialGroup().addComponent(photographLabel)));
                    inputPanelLayout.setVerticalGroup(
                            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(inputPanelLayout.createSequentialGroup().addComponent(photographLabel)));
                    photographLabel.setIcon(displayPhoto);
                    //setTitle("Icon Demo: " + getValue(SHORT_DESCRIPTION).toString());
                    imageload = getValue(SHORT_DESCRIPTION).toString();
                    //javax.swing.JOptionPane.showMessageDialog(null, "The image to be processed is "+imageload, "Image", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }
}